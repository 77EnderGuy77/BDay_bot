require("dotenv").config();
import sqlite3 from "sqlite3";
import { Bot, Context } from "grammy";
import { Database, open } from "sqlite";
import { resolve } from "path";
import cron from "node-cron";
import moment from "moment-timezone";

const bot: Bot = new Bot(process.env.BOT_TOKEN || "");
let db: Database | null = null;

const GROUP_ID: number = parseInt(process.env.GROUP_ID || "0", 10);

async function isDBOpen(ctx: Context): Promise<boolean> {
  if (!db) {
    await ctx.reply(
      "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –µ—ë –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è."
    );
    return false;
  }
  return true;
}

async function openDb(): Promise<Database> {
  const dbFilePath = resolve(__dirname, "./birthday.db");

  try {
    const database = await open({
      filename: dbFilePath,
      driver: sqlite3.Database,
    });

    await database.run(`CREATE TABLE IF NOT EXISTS birthdays (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user TEXT NOT NULL,
      birthday TEXT NOT NULL
    )`);

    return database;
  } catch (error) {
    console.error(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:",
      error
    );
    throw error;
  }
}

bot.command("start", async (ctx: Context) => {
  try {
    db = await openDb();
    console.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞.");

    await ctx.reply(
      "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /addBday user_tag –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú\n" +
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /deleteBday user_tag"
    );
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", error);
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    );
  }
});

function parseBday(date: string): string | null {
  const formats = ["DD-MM-YYYY", "DD-MM"];
  for (const format of formats) {
    const parsedDate = moment(date, format, true);
    if (parsedDate.isValid()) {
      if (format === "DD-MM" && !parsedDate.year()) {
        parsedDate.year(moment().year());
      }
      return parsedDate.format("DD-MM-YYYY");
    }
  }
  return null;
}

bot.command("addBday", async (ctx: Context) => {
  if (!(await isDBOpen(ctx))) return;

  const messageText = ctx.message?.text || "";
  const [command, user, date] = messageText.split(" ");

  if (command !== "/addBday" || !user || !date) {
    return ctx.reply(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addBday user –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, /addBday enderguy77 14-12-2004 –∏–ª–∏ /addBday enderguy77 14-12)"
    );
  }

  const formattedBday = parseBday(date);

  if (!formattedBday) {
    return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD-MM-YYYY –∏–ª–∏ DD-MM.");
  }

  const isValidDate = moment(formattedBday, "DD-MM-YYYY", true).isValid();

  if (!isValidDate) {
    return ctx.reply(
      "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }

  try {
    await db!.run("INSERT INTO birthdays (user, birthday) VALUES (?, ?)", [
      user,
      formattedBday,
    ]);
    ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è @${user} –Ω–∞ ${formattedBday}! üéâ`);
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

bot.command("deleteBday", async (ctx: Context) => {
  if (!(await isDBOpen(ctx))) return;

  const messageText = ctx.message?.text || "";
  const [command, user] = messageText.split(" ");

  if (command !== "/deleteBday" || !user) {
    return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deleteBday user (–Ω–∞–ø—Ä–∏–º–µ—Ä, /deleteBday enderguy77)");
  }

  try {
    const result = await db!.run("DELETE FROM birthdays WHERE user = ?", [
      user,
    ]);
    if (result.changes) {
      ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è @${user} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    } else {
      ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è @${user} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

function calculateAge(birthday: string): number | null {
  const birthDate = moment(birthday, "DD-MM-YYYY");
  if (birthDate.isValid()) {
    const now = moment();
    return now.diff(birthDate, "years");
  }
  return null;
}

async function sendBday(): Promise<void> {
  try {
    const today = moment().format("MM-DD");
    const todayBday = await db!.all(
      "SELECT * FROM birthdays WHERE strftime('%m-%d', birthday) = ?",
      [today]
    );

    if (todayBday.length === 0) {
      return;
    }

    for (const user of todayBday) {
      const age = calculateAge(user.birthday);

      let message = `üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, @${user.user}! üéÇü•≥`;

      if (age !== null) {
        message += ` –í–∞–º ${age} –ª–µ—Ç! üéâ`;
      }

      await bot.api.sendMessage(GROUP_ID, message);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
  }
}

cron.schedule(
  "0 9 * * *",
  async () => {
    console.log("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ 9 —É—Ç—Ä–∞");
    await sendBday();
  },
  { scheduled: true, timezone: "Europe/Kiev" }
);

bot.start();
