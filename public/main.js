"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
const sqlite3_1 = __importDefault(require("sqlite3"));
const grammy_1 = require("grammy");
const sqlite_1 = require("sqlite");
const path_1 = require("path");
const node_cron_1 = __importDefault(require("node-cron"));
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const bot = new grammy_1.Bot(process.env.BOT_TOKEN || "");
let db = null;
const GROUP_ID = parseInt(process.env.GROUP_ID || "0", 10);
function isDBOpen(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!db) {
            yield ctx.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –µ—ë –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è.");
            return false;
        }
        return true;
    });
}
function openDb() {
    return __awaiter(this, void 0, void 0, function* () {
        const dbFilePath = (0, path_1.resolve)(__dirname, "./birthday.db");
        try {
            const database = yield (0, sqlite_1.open)({
                filename: dbFilePath,
                driver: sqlite3_1.default.Database,
            });
            yield database.run(`CREATE TABLE IF NOT EXISTS birthdays (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user TEXT NOT NULL,
      birthday TEXT NOT NULL
    )`);
            return database;
        }
        catch (error) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", error);
            throw error;
        }
    });
}
bot.command("start", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        db = yield openDb();
        console.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞.");
        yield ctx.reply("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /addBday user_tag –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú\n" +
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /deleteBday user_tag");
    }
    catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", error);
        yield ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
    }
}));
function parseBday(date) {
    const formats = ["DD-MM-YYYY", "DD-MM"];
    for (const format of formats) {
        const parsedDate = (0, moment_timezone_1.default)(date, format, true);
        if (parsedDate.isValid()) {
            if (format === "DD-MM" && !parsedDate.year()) {
                parsedDate.year((0, moment_timezone_1.default)().year());
            }
            return parsedDate.format("DD-MM-YYYY");
        }
    }
    return null;
}
bot.command("addBday", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!(yield isDBOpen(ctx)))
        return;
    const messageText = ((_a = ctx.message) === null || _a === void 0 ? void 0 : _a.text) || "";
    const [command, user, date] = messageText.split(" ");
    if (command !== "/addBday" || !user || !date) {
        return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addBday user –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, /addBday enderguy77 14-12-2004 –∏–ª–∏ /addBday enderguy77 14-12)");
    }
    const formattedBday = parseBday(date);
    if (!formattedBday) {
        return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD-MM-YYYY –∏–ª–∏ DD-MM.");
    }
    const isValidDate = (0, moment_timezone_1.default)(formattedBday, "DD-MM-YYYY", true).isValid();
    if (!isValidDate) {
        return ctx.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
    try {
        yield db.run("INSERT INTO birthdays (user, birthday) VALUES (?, ?)", [
            user,
            formattedBday,
        ]);
        ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è @${user} –Ω–∞ ${formattedBday}! üéâ`);
    }
    catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}));
bot.command("deleteBday", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!(yield isDBOpen(ctx)))
        return;
    const messageText = ((_a = ctx.message) === null || _a === void 0 ? void 0 : _a.text) || "";
    const [command, user] = messageText.split(" ");
    if (command !== "/deleteBday" || !user) {
        return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deleteBday user (–Ω–∞–ø—Ä–∏–º–µ—Ä, /deleteBday enderguy77)");
    }
    try {
        const result = yield db.run("DELETE FROM birthdays WHERE user = ?", [
            user,
        ]);
        if (result.changes) {
            ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è @${user} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        }
        else {
            ctx.reply(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è @${user} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}));
function calculateAge(birthday) {
    const birthDate = (0, moment_timezone_1.default)(birthday, "DD-MM-YYYY");
    if (birthDate.isValid()) {
        const now = (0, moment_timezone_1.default)();
        return now.diff(birthDate, "years");
    }
    return null;
}
function sendBday() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const today = (0, moment_timezone_1.default)().format("MM-DD");
            const todayBday = yield db.all("SELECT * FROM birthdays WHERE strftime('%m-%d', birthday) = ?", [today]);
            if (todayBday.length === 0) {
                return;
            }
            for (const user of todayBday) {
                const age = calculateAge(user.birthday);
                let message = `üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, @${user.user}! üéÇü•≥`;
                if (age !== null) {
                    message += ` –í–∞–º ${age} –ª–µ—Ç! üéâ`;
                }
                yield bot.api.sendMessage(GROUP_ID, message);
            }
        }
        catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è:", error);
        }
    });
}
node_cron_1.default.schedule("0 9 * * *", () => __awaiter(void 0, void 0, void 0, function* () {
    console.log("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ 9 —É—Ç—Ä–∞");
    yield sendBday();
}), { scheduled: true, timezone: "Europe/Kiev" });
bot.start();
